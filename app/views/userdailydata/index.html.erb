
</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>
<!--
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.min.js"></script>
<script src="../d3.v2.js"></script> 
<script src="../rickshaw.js"></script>  >
 
<div id="chart"> 


</div> -->

<!-- need to fix css so that graph renders nicely --> 
<style type="text/css">
  #axis0 {
    position: absolute;
    height: 800px;
    width: 40px;
    top: 200px;
  }
  #axis1 {
    position: absolute;
    left: 1000px;
    height: 800px;
    width: 40px;
    top: 200px;
  }
  #chart {
    left: 50px;
    width: 1000px;
  }
</style>


<div id="axis0"></div>
<div id="chart"></div>
<div id="axis1"></div>


<script>

//x is the date, y is the calories consumed
var transformedPoints = gon.calories_consumed.map(function (pt) {
    return {
        x: pt[0],
        y: pt[1]
    };
});

gon.calories_consumed = transformedPoints;

//testing deficit 
//x is the date, y is the calories burned - calories consumed / calories needed for goal
var transformedGoal = gon.percent_towards_goal.map(function (pt) {
    return {
        x: pt[0],
        y: pt[1]
    };
});


//including bmr and calories burned via exercise
gon.percent_towards_goal = transformedGoal;


var data, max, min, point, random, scales, series, _j, _k, _l, _len, _len1, _len2, _ref;

data = [gon.calories_consumed, gon.percent_towards_goal];



scales = [];


// for each of the two series
for (_k = 0, _len1 = data.length; _k < _len1; _k++) {
  series = data[_k];
  min = Number.MAX_VALUE;
  max = Number.MIN_VALUE;
//for each element within the series we are currently on
  for (_l = 0, _len2 = series.length; _l < _len2; _l++) {
    //for each point in the series we are currently on
    point = series[_l];
    //takes the min of point y and the past min
    min = Math.min(min, point.y);
    //takes a running max
    max = Math.max(max, point.y);
  }

//Push just adds elements to an array. 

  if (_k === 0) {
    //we only have 2 series, this code says make the first series linear
    scales.push(d3.scale.linear().domain([min, max]).nice());
  } else {
    //else, make the series exponential/linear, whatever is specified in the code below
    //nice just picks a nice starting and ending point
    //say, only beginning and endings of months 
    scales.push(d3.scale.linear().domain([min, max]).nice());
  }
}


var graph = new Rickshaw.Graph( {
  element: document.getElementById("chart"),
  renderer: 'multi',
  width: 900,
  height: 500,
  dotSize: 5,
  padding:{top:0.01 , right:.01 , bottom:.01 , left:0} ,
  //need to put in x,y pairs
  series: [
    {
      name: 'Calories',
      data: gon.calories_consumed,
      color: 'steelblue',
      renderer: 'line' ,
      scale: scales[0]


    }, {
      name: 'Percent towards goal',
      data: gon.percent_towards_goal,
      color: 'rgba(255, 127, 0, 0.4)',
      renderer: 'area',
      scale: scales[1]
    }
  ]
} );

var formatDecimal = d3.format("0,000");

var y1 = new Rickshaw.Graph.Axis.Y.Scaled({
  element: document.getElementById('axis0'),
  graph: graph,
  orientation: 'left',
  grid: false,
  //this scale doesnt seem to be used
  scale: scales[0],
  tickFormat: formatDecimal
});

var formatPercent = d3.format("00.00%");

var y2 = new Rickshaw.Graph.Axis.Y.Scaled({
  element: document.getElementById('axis1'),
  graph: graph,
  grid: false,
  orientation: 'right',
  //when below is 0 we have the calories on primary axis
  scale: scales[1],
  tickFormat: formatPercent
});

new Rickshaw.Graph.Axis.Time({
  graph: graph
});

y1.render();
graph.render();
y2.render();





var detail = new Rickshaw.Graph.HoverDetail({
  graph: graph
});
</script>



<style type="text/css">
.tftable {font-size:12px;color:#333333;width:100%;border-width: 1px;border-color: #729ea5;border-collapse: collapse;}
.tftable th {font-size:12px;background-color:#171515;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:left;}
.tftable tr {background-color:#ffffff;}
.tftable td {font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;}
.tftable tr:hover td {background-color:#ffff99;}
</style>

</br>

<table border='1' class="tftable">
  <thead>
    <tr>
      <th>Date </th>
      <th>Calories Consumed</th>
      <th>Calories Burned by Excercise</th>
      <th>Weight</th>
    </tr>
  </thead>
  <tbody>

<% @userdailydata.each do |data| %>
<tr>
<td> <%= best_in_place data, :date,:display_with => lambda { |v| v.strftime("%Y-%m-%d") }  %> </td>
<td> <%= best_in_place data, :calories_consumed %> </td>
<td> <%= best_in_place data, :calories_exercised %> </td>
<td> <%= best_in_place data, :weight %> </td>

</tr> 

<% end %>
</tbody>
</table>

<!-- need to include current dates row-->



<!-- .strftime("%Y-%m-%d") -->
